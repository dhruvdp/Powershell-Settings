#Variables
$currentDateStamp = (Get-Date -UFormat %Y).ToString() + (Get-Date -UFormat %m).ToString() + (Get-Date -UFormat %d).ToString() 

#Creates a date stamp in a specific format. ex. 2013-01-31
$outputMainDir = "F:\Backups\"
$sevenZip = "C:\Program Files\7-Zip\7z.exe"
$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition 

#Grabs the path that the script was run from
$scriptPath += "\" 

#Web Path Variables
$inputWebsDir = "F:\Sites\"
$outputWebsDir = $outputMainDir + "Webs\"

#DB Path Variables
$inputDBDir = "F:\Backups\Databases\"
$outputDBDir = $outputMainDir + "Databases\" 

#Backup and Zip website files
$filesToZip = Get-ChildItem $inputWebsDir -Attributes D 

#Grabs all the folders for websites that need backed up.
#Loops through each folder to be zipped
foreach($f in $filesToZip) {    
	$zipArgs = "a", "-tzip",($outputWebsDir + $f.Name + "\" + $f.Name + "_" + $currentDateStamp + ".zip"),($inputWebsDir + $f.Name + "\*")
	
	#Sets arguments for 7zip. Includes creating a sub directory for each website.    
	& $sevenZip $zipArgs #Zips folder 
	#You would think that an ampersand (&) would join something but in powershell it executes a command.
} 

#Backup SQL Databases
Invoke-Sqlcmd -ServerInstance "."  -inputfile ($scriptPath + "BackupSQL_Script.sql") 
#Runs SQL script to create .bak files for all databases.

$filesToZip = Get-ChildItem ($outputDBDir + "*.bak") -Attributes !D 

#Gets a list of all the .bak files that need zipped.
#Loop through each file in order to zip it up
foreach($f in $filesToZip) {
	$zipArgs = "a", "-tzip",($outputDBDir + $f.Name + ".zip"),($outputDBDir + $f.Name) 
	#Arguments to pass to 7zip    
	& $sevenZip $zipArgs #Zips .bak file    
	Remove-Item $f.PSPath #Removes .bak file
}
